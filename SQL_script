#1. What is the count of customers in each country?	And revenue?			
SELECT E.country, COUNT(DISTINCT B.customer_id) AS customer_count, SUM(P.amount) AS total_revenue				
FROM rental A				
JOIN customer B ON A.customer_id = B.customer_id				
JOIN address C ON B.address_id = C.address_id				
JOIN city D ON C.city_id = D.city_id				
JOIN country E ON D.country_id = E.country_id				
JOIN payment P ON A.rental_id = P.rental_id				
GROUP BY E.country				
ORDER BY total_revenue DESC;

#Query explanation#
The SQL query determines each country's unique customer count and total revenue from a rental and payment database. 
It merges information from tables on rentals, customers, addresses, cities, countries, and payments, then groups and ranks the results by revenue, highlighting the top-contributing countries.

				
#2. Top 10 countries with the highest count of customers

SELECT E.country, COUNT(*) AS customer_count				
FROM rental A				
JOIN customer B ON A.customer_id = B.customer_id				
JOIN address C ON B.address_id = C.address_id				
JOIN city D ON C.city_id = D.city_id				
JOIN country E ON D.country_id = E.country_id				
GROUP BY E.country		
ORDER BY customer_count DESC
LIMIT 10;

#Query explanation#
#This query calculates the number of customers from each country by joining the relevant tables (rental, customer, address, city, and country) and groups the results by country. 
#It then orders the countries by the count of customers in descending order, showing only the top 10 countries with the highest customer count.

				
				
3. What are the most popular movies? TOP 20				
SELECT film.film_id, film.title, COUNT(rental.rental_id) AS rental_count				
FROM rental				
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id				
INNER JOIN film ON inventory.film_id = film.film_id				
GROUP BY film.film_id				
ORDER BY rental_count DESC				
LIMIT 20	

#Query explanation#
#The SQL query ranks the top 20 movies by rental frequency, utilizing joins across the `rental`, `inventory`, and `film` tables to link each film to its rental count. 
#Grouping by `film.film_id` and sorting in descending order by `rental_count` prioritizes films with more rentals. 
#The `LIMIT 20` clause then narrows the output to the most rented films, showcasing the most popular selections. 

				
4.Which films have the highest and lowest rental rates?				
(SELECT film_id, title, rental_rate
FROM film
ORDER BY rental_rate DESC
LIMIT 1)

UNION ALL

(SELECT film_id, title, rental_rate
FROM film
ORDER BY rental_rate ASC
LIMIT 1);

#Query explanation#
#This query uses two SELECT statements, each with a LIMIT 1 to get the film with the highest rental rate and the film with the lowest rental rate, respectively. 
#The UNION ALL operator is used to combine the results of these two queries into a single output.
				
				
5.Most popular genre and revenue				
SELECT 				
  category.name AS genre, 				
  COUNT(rental.rental_id) AS rental_count,				
  SUM(payment.amount) AS total_revenue				
FROM rental				
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id				
INNER JOIN film ON inventory.film_id = film.film_id				
INNER JOIN film_category ON film.film_id = film_category.film_id				
INNER JOIN category ON film_category.category_id = category.category_id				
INNER JOIN payment ON rental.rental_id = payment.rental_id				
GROUP BY category.name				
ORDER BY rental_count DESC;		

#Query explanation#
#This SQL query calculates the total revenue and counts rentals for each movie genre by joining several tables: rentals, inventory, films, film categories, categories, and payments. 
#It groups the results by genre, ordering them by rental count in descending order to highlight the most popular genres and their associated revenue.
				
				
6. Film popularity by rating and its revenue 				
SELECT 				
  film.rating, 				
  COUNT(rental.rental_id) AS rental_count,				
  SUM(payment.amount) AS total_revenue				
FROM rental				
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id				
INNER JOIN film ON inventory.film_id = film.film_id				
INNER JOIN payment ON rental.rental_id = payment.rental_id				
GROUP BY film.rating				
ORDER BY rental_count DESC;				

#Query explanation#
#It joins the `rental`, `inventory`, `film`, and `payment` tables to link each rental to its corresponding film and payment details. 
#The query groups the results by film rating and orders them by rental count in descending order.



7. Top 10 actors for rental count and revenue 				
SELECT 				
  actor.first_name, 				
  actor.last_name, 				
  COUNT(rental.rental_id) AS rental_count,				
  SUM(payment.amount) AS total_revenue				
FROM rental				
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id				
INNER JOIN film ON inventory.film_id = film.film_id				
INNER JOIN film_actor ON film.film_id = film_actor.film_id				
INNER JOIN actor ON film_actor.actor_id = actor.actor_id				
INNER JOIN payment ON rental.rental_id = payment.rental_id				
GROUP BY actor.actor_id				
ORDER BY rental_count DESC				
LIMIT 10;	


#Query explanation#
$The query calculates the top 10 actors based on rental counts and total revenue from their films. 
#By linking rentals to films and actors, and then summing payments, it ranks actors by their impact on rentals and revenue, grouping and ordering the results by their rental count in descending order.


8. Customer Frequency - top 10				
SELECT customer.customer_id, CONCAT(customer.first_name, ' ', customer.last_name) AS customer_name, COUNT(rental.rental_id) AS rental_count				
FROM customer				
INNER JOIN rental ON customer.customer_id = rental.customer_id				
GROUP BY customer.customer_id				
ORDER BY rental_count DESC				
LIMIT 10	

#Query explanation#
#The query identifies the top 10 customers with the highest number of rentals. 
#It combines customer details with their rental activity, groups the results by customer ID, and sorts them by rental count in descending order to highlight the most frequent renters.
				
				
9. MIN, MAX, AVG for rental rate, rental duration, lengh of film, replacement cost				
SELECT MIN(rental_rate) AS min_rent,				
       MAX(rental_rate) AS max_rent,				
       AVG(rental_rate) AS avg_rent,				
       MIN(rental_duration) AS min_duration,				
       MAX(rental_duration) AS max_duration,				
       AVG(rental_duration) AS avg_duration,				
	   MIN(length) AS min_length,			
       MAX(length) AS max_length,				
       AVG(length) AS avg_length,				
	   MIN(replacement_cost) AS min_cost,			
       MAX(replacement_cost) AS max_cost,				
       AVG(replacement_cost) AS avg_cost				
FROM film		

#Query explanation#
#The query calculates the minimum, maximum, and average values for rental rate, rental duration, film length, and replacement cost across all films. 
#It provides a comprehensive overview of film statistics, helping to understand the range and typical values of these attributes in the film database.
				
10. Revenue from Min lengh movies vs long length movies 				
WITH FilmLengthCategories AS (				
  SELECT				
    film_id,				
    CASE				
      WHEN length <= (SELECT MIN(length) FROM film) THEN 'Shortest Length Films'				
      WHEN length >= (SELECT MAX(length) FROM film) THEN 'Longest Length Films'				
      ELSE 'Other Films'				
    END AS FilmLengthCategory				
  FROM film				
),				
SalesByLength AS (				
  SELECT				
    flc.FilmLengthCategory,				
    COUNT(r.rental_id) AS RentalCount, -- Added line for rental count				
    SUM(p.amount) AS TotalSales				
  FROM rental r				
  INNER JOIN inventory i ON r.inventory_id = i.inventory_id				
  INNER JOIN FilmLengthCategories flc ON i.film_id = flc.film_id				
  INNER JOIN payment p ON r.rental_id = p.rental_id				
  WHERE flc.FilmLengthCategory IN ('Shortest Length Films', 'Longest Length Films')				
  GROUP BY flc.FilmLengthCategory				
)				
				
SELECT *				
FROM SalesByLength;	

#Query explanation#
#It first categorizes films into "Shortest Length Films", "Longest Length Films", or "Other Films" based on their length. 
#Then, it calculates the total revenue (TotalSales) and rental counts (RentalCount) for only the shortest and longest films, ignoring other categories. 
#The final output presents these figures, offering insight into the performance of films at extreme lengths in terms of rentals and revenue generated.


				
11. Which movies contributed the most/least to revenue gain? (Top 10 movies) Added genre				
SELECT 				
  film.title,				
  film.film_id,				
  category.name AS genre,				
  COUNT(rental.rental_id) AS rental_count,				
  SUM(payment.amount) AS total_revenue				
FROM film				
INNER JOIN inventory ON film.film_id = inventory.film_id				
INNER JOIN rental ON inventory.inventory_id = rental.inventory_id				
INNER JOIN payment ON rental.rental_id = payment.rental_id				
INNER JOIN film_category ON film.film_id = film_category.film_id				
INNER JOIN category ON film_category.category_id = category.category_id				
GROUP BY film.title, film.film_id, category.name				
ORDER BY total_revenue DESC;		

#Query explanation#
#The query identifies the top 10 films that have generated the most and least revenue, including their genre, rental count, and total revenue. 
#By joining the `film`, `inventory`, `rental`, `payment`, and `category` tables,
#it aggregates rental and payment data for each film, grouped by title and genre, then orders the results by total revenue in descending order to highlight the highest revenue-generating movies.



12. Does price of rental effect amount of rented movies and its profit from it?				
SELECT 				
  film.rental_rate,				
  COUNT(*) AS movies_rented,				
  SUM(payment.amount) AS total_revenue				
FROM rental				
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id				
INNER JOIN film ON inventory.film_id = film.film_id				
INNER JOIN payment ON rental.rental_id = payment.rental_id				
WHERE film.rental_rate IN (4.99, 2.99, 0.99)				
GROUP BY film.rental_rate;	

#Query explanation#
#It filters films by specific rental rates (4.99, 2.99, 0.99), counts the rentals, 
#and calculates total revenue for each rate, grouping the results by rental rate to analyze the impact of pricing on rental frequency and profitability.



13. WITH CountryRevenue AS (			
    SELECT 			
        c.country,			
        SUM(p.amount) AS total_revenue			
    FROM payment p			
    JOIN rental r ON p.rental_id = r.rental_id			
    JOIN customer cu ON r.customer_id = cu.customer_id			
    JOIN address a ON cu.address_id = a.address_id			
    JOIN city ci ON a.city_id = ci.city_id			
    JOIN country c ON ci.country_id = c.country_id			
    GROUP BY c.country			
    ORDER BY total_revenue DESC			
    LIMIT 10			
),			
GenreRevenue AS (			
    SELECT 			
        c.country,			
        cat.name AS genre,			
        SUM(p.amount) AS genre_revenue			
    FROM payment p			
    JOIN rental r ON p.rental_id = r.rental_id			
    JOIN inventory i ON r.inventory_id = i.inventory_id			
    JOIN film f ON i.film_id = f.film_id			
    JOIN film_category fc ON f.film_id = fc.film_id			
    JOIN category cat ON fc.category_id = cat.category_id			
    JOIN customer cu ON r.customer_id = cu.customer_id			
    JOIN address a ON cu.address_id = a.address_id			
    JOIN city ci ON a.city_id = ci.city_id			
    JOIN country c ON ci.country_id = c.country_id			
    WHERE c.country IN (SELECT country FROM CountryRevenue)			
    GROUP BY c.country, cat.name			
)			
SELECT 			
    gr.country,			
    gr.genre,			
    gr.genre_revenue			
FROM GenreRevenue gr			
JOIN CountryRevenue cr ON gr.country = cr.country			
ORDER BY gr.country, gr.genre_revenue DESC;				

#Query explanation#
#The CountryRevenue CTE selects the 10 countries with the highest total rental revenue.
#The GenreRevenue CTE calculates the total revenue per genre for those top 10 countries.
#The main query selects the country and genre, along with the calculated revenue for each genre, from the GenreRevenue CTE, ensuring it only includes genres from the top 10 revenue countries identified in the CountryRevenue CTE. 

   	
				
14. Whats the count of rentals by day of the week?				
SELECT 				
  TO_CHAR(rental.rental_date, 'Day') AS rental_day,				
  COUNT(*) AS rental_count				
FROM rental				
GROUP BY rental_day				
ORDER BY rental_count DESC;		

#Query explanation#
#The query counts rentals per day of the week and sorts them from highest to lowest count.


15. What time of the day the peak of the rentals?			
SELECT 			
  EXTRACT(hour FROM rental.rental_date) AS rental_hour,			
  COUNT(*) AS rental_count			
FROM rental			
GROUP BY rental_hour			
ORDER BY rental_count DESC			
LIMIT 1;

#Query explanation#
#The query identifies the hour of the day when the most rentals occur by counting rentals for each hour, grouping the results by hour, and ordering to show the peak rental hour at the top.

